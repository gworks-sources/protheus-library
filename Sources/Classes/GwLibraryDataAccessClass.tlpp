#include "TOTVS.ch"
#include "MsObject.ch"

using namespace Gworks.Library.Utils
using namespace Gworks.library.Functions

namespace Gworks.Library.Classes

Class GwDataAccess

    Public Data cAlias      as character default ""
    Public Data aAliasArea  as array default {}
    Public Data aOtherAreas as array default {}
    Public Data aQuery      as array default {}
    Public Data lOppened    as logical default .F.

    Public Data lSeekById as logical default .F.

    Public Method New() Constructor
    Public Method SelectArea() as variant
    Public Method SetOrder( xOrder as variant )
    Public Method RetIndexOrder() as numeric
    Public Method GoTop() as variant
    Public Method GoBottom() as variant
    Public Method GoToRecno( nRecno as numeric ) as logical
    Public Method SkipLine() as variant
    Public Method Seek( cKey as character ) as logical
    Public Method SeekAutoFilial( cKey as character ) as logical
    Public Method SaveArea() as variant
    Public Method SaveOtherAreas( aNames as array )
    Public Method RestoreArea() as variant
    Public Method RestoreOtherAreas( cNames as character ) as variant
    Public Method EraseArea() as variant
    Public Method EraseOtherAreas() as variant
    Public Method EvalByCondition( bExec as codeblock, bCondition as codeblock ) as variant
    Public Method GetValue( cName as character ) as variant
    Public Method EndOfLines() as logical
    Public Method NotEndOfLines() as logical
    Public Method TotalLines() as numeric
    Public Method Oppened() as logical
    Public Method CloseArea() as variant
    Public Method ReleaseArea() as variant
    Public Method GetRecnoId() as variant

    Public Method SeekCheck() as logical
    Public Method SeekById( cAprovadorId as character ) as logical

EndClass


Method New(cAlias as character) Class GwDataAccess

    Self:cAlias      := cAlias
    Self:lOppened    := Select(cAlias) > 0
    Self:aAliasArea  := if( ::lOppened, (cAlias)->(GetArea()), {} )
    Self:aOtherAreas := {}

Return Self


Method SelectArea() as variant Class GwDataAccess

    DbSelectArea(Self:cAlias)

Return


Method SetOrder( xOrder as variant )  as variant Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

    do case
        case Val(xOrder) == 'N' ; (cAlias)->(DbSetOrder(xOrder))

        case Val(xOrder) == "C" ; (cAlias)->(RetOrder(,xOrder))

        otherwise
            UserException("GwDataAccess:SetOrder - Argumentos inválidos!")
    endcase

    (cAlias)->(DbGoTop())

Return


Method RetIndexOrder() as numeric Class GwDataAccess

    Local cAlias := "" as character
    Local nOrder := 0 as numeric

    cAlias := Self:cAlias

    nOrder := (cAlias)->(IndexOrd())

Return nOrder


Method GoTop() as variant Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

    (cAlias)->(DbGoTop())

Return


Method GoBottom() as variant Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

    (cAlias)->(DbGoBottom())

Return


Method GoToRecno( nRecno as numeric ) as logical Class GwDataAccess

    Local cAlias  := ""  as character
    Local lResult := .F. as logical

    Default nRecno := 0

    if nRecno > 0

        cAlias := Self:cAlias

        (cAlias)->(DbGoTo(nRecno))

        if (cAlias)->(Recno()) == nRecno
            lResult := .T.
        endif

    endif

Return lResult


Method SkipLine() as variant Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

    (cAlias)->(DbSkip())

Return


Method Seek( cKey as character ) as logical Class GwDataAccess

    Local cAlias  := ""  as character
    Local lResult := .F. as logical

    Default cKey := ""

    if !Empty(cKey)

        cAlias := Self:cAlias

        if (cAlias)->(MsSeek(cKey))
            lResult := .T.
        endif

    endif

Return lResult


Method SeekAutoFilial( cKey as character ) as logical Class GwDataAccess

    Default cKey := ""

    ::Seek(xFilial(::cAlias)+cKey)

Return


Method SaveArea() as variant Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

    if !Empty(Self:aAliasArea)
        Self:EraseArea()
    endif

    Self:aAliasArea := (cAlias)->(GetArea())

Return


Method SaveOtherAreas( aNames as array ) as variant Class GwDataAccess

    Local aAreas := {} as array
    Local cAlias := "" as character
    Local nI     := 0  as numeric

    Default aNames := {}

    for nI:=1 to Len(aNames)

        cAlias := aNames[nI]

        aAdd( aAreas, (cAlias)->(GetArea()) )

    next

    Self:aOtherAreas := aClone(aAreas)

Return


Method RestoreArea() as variant Class GwDataAccess

    RestArea(Self:aAliasArea)

Return


Method RestoreOtherAreas( cNames as character ) as variant Class GwDataAccess

    Local aAreas := {} as array
    Local cName  := "" as character
    Local cToken := "" as character
    Local nI     := 0  as numeric
    Local nJ     := 0  as numeric
    Local nPos   := 0  as numeric

    Default cNames := ""

    if Empty(cNames)
        Return
    endif

    cToken := ";"

    aNames := if( at(cNames,cToken) > 0, StrToKarr(cNames,cToken), { cNames } )

    For nI:=1 to Len(aNames)

        cName := aNames[nI]

        if !Empty(cName)
            nPos := aScan(Self:aOtherAreas, {|x| x[1]==cName})
        endif

        for nJ:=1 to Len(Self:aOtherAreas)

            if nPos > 0 .And. nJ != nPos
                loop
            endif

            aAreas := Self:aOtherAreas[nJ]

            RestArea(aAreas[nJ])

        next nJ

    next nI

Return


Method EraseArea() as variant Class GwDataAccess

    FwFreeArray(Self:aAliasArea)
    Self:aAliasArea := {}

Return


Method EraseOtherAreas() as variant Class GwDataAccess

    FwFreeArray(Self:aOtherAreas)
    Self:aOtherAreas := {}

Return


Method EvalByCondition( bExec as codeblock, bCondition as codeblock ) as variant Class GwDataAccess

    Local cAlias := "" as character

    Default bExec := {|| }
    Default bCondition := {|| }

    if !Empty(bExec) .And. !Empty(bCondition)

        cAlias := Self:cAlias

        (cAlias)->( DbEval( bExec, nil, bCondition ) )

    endif

Return


Method GetValue( cName as character ) as variant Class GwDataAccess

    Local cAlias := ""  as character
    Local xRet   := nil as variant

    Default cName := ""

    if !Empty(cName)

        cAlias := Self:cAlias

        xRet := (cAlias)->&cName

    endif

Return xRet


Method EndOfLines() as logical Class GwDataAccess

Return (Self:cAlias)->(EOF())


Method NotEndOfLines() as logical Class GwDataAccess

Return !(Self:cAlias)->(EOF())


Method TotalLines() as numeric Class GwDataAccess

    Local cAlias := "" as character
    Local nTotal := 0  as numeric

    cAlias := Self:cAlias
    nTotal := Contar(cAlias,"!EOF()")

    (cAlias)->(DbGoTop())

Return nTotal


Method Oppened() as logical Class GwDataAccess

Return ::lOppened


Method CloseArea() as variant Class GwDataAccess

    Local cAlias := ""  as character

    cAlias := Self:cAlias

    (cAlias)->(DbCloseArea())

Return


Method ReleaseArea() as variant Class GwDataAccess

    Local cAlias := ""  as character

    cAlias := Self:cAlias

    do case
        case  ::lOppened ; ::RestArea()
        case !::lOppened ; ::CloseArea()
    endcase

Return


Method GetRecnoId() Class GwDataAccess

    Local cAlias := "" as character

    cAlias := Self:cAlias

Return (cAlias)->(Recno())


Method SeekCheck() as logical Class GwDataAccess

    Local lResult := .F. as logical

    Default cName := cFieldIdAprovador__

    if ::lSeekById .And. _Super:NotEndOfLines() .And. ::cAprovadorId == Super:GetValue(cName)
        lResult := .F.
    endif

Return lResult


Method SeekById( cId as character ) as logical Class GwDataAccess

    ::cId       := ""
    ::nRecno    := 0
    ::lSeekById := .F.

    if !::SeekCheck()

        _Super:SelectArea()
        _Super:SetOrder(cUniqueIndexAprovador__)
        _Super:GoTop()
        if _Super:SeekAutoFilial(cId)
            ::lSeekById := .T.
        endif

    else
        ::lSeekById := .T.
    endif

    if ::lSeekById
        ::cId    := _Super:GetValue(cFieldIdAprovador__)
        ::nRecno := _Super:GetRecnoId()
        ::LoadAllItensId()
    endif

Return ::lSeekById



